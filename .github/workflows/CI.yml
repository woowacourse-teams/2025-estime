name: CI Pipeline

on:
  pull_request:
    branches:
      [ be/dev ]
    types:
      [ opened, synchronize, reopened ]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpw
          MYSQL_DATABASE: testdb
          # --- [수정 1] 원격 접속을 위한 새 사용자 생성 ---
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # --- [수정 2] 애플리케이션도 일관성을 위해 새 사용자로 접속 ---
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password

      URL_ORIGIN_LOCAL: ${{ secrets.URL_ORIGIN_LOCAL }}
      URL_ORIGIN_DEV: ${{ secrets.URL_ORIGIN_DEV }}
      URL_ORIGIN_PROD: ${{ secrets.URL_ORIGIN_PROD }}
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: JDK 21 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Gradle Wrapper 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Wait for MySQL to be ready (max 2 min)
        run: |
          echo "Waiting for MySQL to be ready (timeout: 2 minutes)..."
          max_attempts=40
          i=1
          while [ $i -le $max_attempts ]; do
            # --- [디버깅] --silent 옵션을 제거하여 정확한 에러 메시지 확인 ---
            if mysqladmin ping -h mysql -u user -ppassword; then
              echo "MySQL is ready after $i attempts."
              break
            else
              echo "MySQL not ready yet... retrying ($i/$max_attempts)"
              sleep 3
              i=$((i + 1))
            fi
          done

      - name: 전체 빌드 및 테스트
        run: |
          echo "SPRING_PROFILES_ACTIVE = $SPRING_PROFILES_ACTIVE"
          echo "SPRING_DATASOURCE_URL = $SPRING_DATASOURCE_URL"
          ./gradlew clean build --stacktrace

      - name: Close PR, if build fail
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.TOKEN }}
          script: |
            const pull_number = ${{ github.event.pull_request.number }}
            const updated_title = `[BUILD FAIL] ${{ github.event.pull_request.title }}`
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              body: '빌드에 실패했습니다.',
              event: 'REQUEST_CHANGES'
            })
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              title: updated_title,
              state: 'closed'
            })