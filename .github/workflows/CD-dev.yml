name: CD Dev Pipeline

on:
  push:
    branches: [ be/dev ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      short_sha: ${{ steps.set_short_sha.outputs.short_sha }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpw
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_PROFILES_ACTIVE: dev

      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: testpw

      URL_ORIGIN_CLIENT: ${{ secrets.URL_ORIGIN_DEV }}

      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calc short sha
        id: set_short_sha
        run: echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Gradle Wrapper 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 전체 빌드
        run: ./gradlew clean build -x test --stacktrace -Dspring.profiles.active=dev

      - name: Docker Hub Login
        run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" \
          | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DEV_IMAGE_NAME }}:${{ steps.set_short_sha.outputs.short_sha }}
            ${{ secrets.DEV_IMAGE_NAME }}:latest

  deploy:
    runs-on: [ self-hosted, estime-dev ]
    needs: build-and-push

    env:
      SPRING_PROFILES_ACTIVE: dev

    steps:
      - name: Move .env.dev to home directory
        run: |
          if [ -f ./application/.env.dev ]; then
            echo "Found .env.dev, moving it to home directory for backup."
            mv ./application/.env.dev ~/.env.dev.backup
          else
            echo "No .env.dev file found to back up."
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore .env.dev from backup
        run: |
          if [ -f ~/.env.dev.backup ]; then
            echo "Restoring .env.dev.before from backup."
            mv ~/.env.dev.backup ./application/.env.dev.before
          else
            echo "No backup file found to restore."
          fi

      - name: Create env file for Docker Compose
        run: |
          printf '%s\n' "IMAGE_NAME=${{ secrets.DEV_IMAGE_NAME }}" > .env

      - name: Create env file for env.dev file
        working-directory: ./application
        run: |
          printf '%s\n' "${{ secrets.ENV_DEV }}" > .env.dev

      - name: Prepare log directory
        run: |
          sudo mkdir -p /app/logs
          sudo chown -R 1001:1001 /app/logs

      - name: Deploy with Docker Compose
        run: |
          docker compose -f docker-compose.dev.yml pull api
          docker compose -f docker-compose.dev.yml up -d

      - name: Debug running containers
        run: docker ps -a

      - name: Clean up temporary backup file
        if: always()
        run: |
          echo "Cleaning up temporary backup file from home directory."
          rm -f ~/.env.dev.backup
