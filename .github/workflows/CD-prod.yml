name: CD Prod Pipeline

on:
  push:
    tags:
      - 'v*.*.*-be'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpw
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: testpw
      URL_ORIGIN_LOCAL: ${{ secrets.URL_ORIGIN_LOCAL }}
      URL_ORIGIN_DEV: ${{ secrets.URL_ORIGIN_DEV }}
      URL_ORIGIN_PROD: ${{ secrets.URL_ORIGIN_PROD }}
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from git tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Gradle Wrapper 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 전체 빌드
        run: ./gradlew clean build -x test --stacktrace -Dspring.profiles.active=prod

      - name: Docker Hub Login
        run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./estime-api
          file: ./estime-api/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.PROD_IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
            ${{ secrets.PROD_IMAGE_NAME }}:latest

  deploy:
    runs-on: [ self-hosted, estime-prod ]
    needs: build-and-push

    env:
      SPRING_PROFILES_ACTIVE: prod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Backup existing .env.prod file
        working-directory: ./estime-api
        run: |
          if [ -f .env.prod ]; then
            echo "Found .env.prod, backing up to .env.prod.before"
            mv .env.prod .env.prod.before
          else
            echo "No .env.prod file found, skipping backup."
          fi

      - name: Create env file for Docker Compose
        run: |
          printf '%s\n' "IMAGE_NAME=${{ secrets.PROD_IMAGE_NAME }}" > .env
          printf '%s\n' "IMAGE_TAG=${{ needs.build-and-push.outputs.version }}" >> .env

      - name: Create env file for env.prod file
        working-directory: ./estime-api
        run: |
          printf '%s\n' "${{ secrets.ENV_PROD }}" > .env.prod

      - name: Deploy with Docker Compose
        run: |
          docker compose -f docker-compose.prod.yml pull api
          docker compose -f docker-compose.prod.yml up -d

      - name: Debug running containers
        run: |
          echo "Waiting 10 seconds for containers to stabilize..."
          sleep 10
          docker ps -a

      - name: Clean up unused Docker resources
        if: always()
        run: docker system prune -a -f
