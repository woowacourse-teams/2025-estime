name: Lighthouse CI

on:
  pull_request:
    branches:
      - fe/dev
      - fe/prod
    paths:
      - "frontend/**"

permissions:
  contents: read
  pull-requests: write

jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build # Webpack → build/ 생성

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          lhci autorun \
            --collect.staticDistDir=./build \
            --collect.numberOfRuns=1 \
            --upload.target=filesystem \
            --upload.outputDir=./lhci_reports || echo "Lighthouse CI failed"

      - name: Format Lighthouse Score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync("./frontend/lhci_reports/manifest.json"));
            const result = results[0]; // ✅ 첫 번째 결과만 사용

            const details = JSON.parse(fs.readFileSync(result.jsonPath));
            const { audits } = details;
            const summary = result.summary;

            const fmt = (s) => Math.round(s * 100);
            Object.keys(summary).forEach((k) => summary[k] = fmt(summary[k]));
            const icon = (v) => (v >= 90 ? "🟢" : v >= 50 ? "🟠" : "🔴");

            const comment = [
              `## ⚡️ Lighthouse Report`,
              `| Category | Score |`,
              `| --- | --- | --- |`,
              `| ${icon(summary.performance)} Performance (성능) | ${summary.performance} |`,
              `| ${icon(summary.accessibility)} Accessibility (접근성) | ${summary.accessibility} |`,
              `| ${icon(summary['best-practices'])} Best Practices (모범 사례) | ${summary['best-practices']} |`,
              `| ${icon(summary.seo)} SEO (검색엔진 최적화) | ${summary.seo} |`,
            ].join("\n");

            const detail = [
              `### 📊 Performance Details (성능 세부 지표)`,
              `| Metric (지표)) | Value |`,
              `| --- | --- | --- |`,
              `| ${icon(audits["first-contentful-paint"].score*100)} First Contentful Paint (최초 콘텐츠 표시) | ${audits["first-contentful-paint"].displayValue} |`,
              `| ${icon(audits["largest-contentful-paint"].score*100)} Largest Contentful Paint (최대 콘텐츠 표시) | ${audits["largest-contentful-paint"].displayValue} |`,
              `| ${icon(audits["total-blocking-time"].score*100)} Total Blocking Time (총 차단 시간) | ${audits["total-blocking-time"].displayValue} |`,
              `| ${icon(audits["cumulative-layout-shift"].score*100)} Cumulative Layout Shift (누적 레이아웃 이동) | ${audits["cumulative-layout-shift"].displayValue} |`,
              `| ${icon(audits["interactive"].score*100)} Time To Interactive (상호작용 가능 시간) | ${audits["interactive"].displayValue} |`,
            ].join("\n");

            core.setOutput("comments", comment + "\n\n" + detail);

      - name: Comment on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comments }}
